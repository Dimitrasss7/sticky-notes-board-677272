import { useState, useEffect } from 'react'; interface Note { id: string; text: string; color: string; x: number; y: number; } const COLORS = ['#fef08a', '#bfdbfe', '#fecaca', '#d9f99d', '#e9d5ff', '#fed7aa']; export default function App() { const [notes, setNotes] = useState<Note[]>([]); const [draggedNote, setDraggedNote] = useState<string | null>(null); const [offset, setOffset] = useState({ x: 0, y: 0 }); useEffect(() => { const saved = localStorage.getItem('stickyNotes'); if (saved) setNotes(JSON.parse(saved)); }, []); useEffect(() => { localStorage.setItem('stickyNotes', JSON.stringify(notes)); }, [notes]); const addNote = () => { const newNote: Note = { id: Date.now().toString(), text: '', color: COLORS[Math.floor(Math.random() * COLORS.length)], x: Math.random() * (window.innerWidth - 250), y: Math.random() * (window.innerHeight - 250) }; setNotes([...notes, newNote]); }; const deleteNote = (id: string) => { setNotes(notes.filter(n => n.id !== id)); }; const updateText = (id: string, text: string) => { setNotes(notes.map(n => n.id === id ? { ...n, text } : n)); }; const changeColor = (id: string) => { setNotes(notes.map(n => { if (n.id === id) { const currentIndex = COLORS.indexOf(n.color); const nextColor = COLORS[(currentIndex + 1) % COLORS.length]; return { ...n, color: nextColor }; } return n; })); }; const handleMouseDown = (e: React.MouseEvent, id: string) => { const note = notes.find(n => n.id === id); if (note) { setDraggedNote(id); setOffset({ x: e.clientX - note.x, y: e.clientY - note.y }); } }; const handleMouseMove = (e: React.MouseEvent) => { if (draggedNote) { setNotes(notes.map(n => n.id === draggedNote ? { ...n, x: e.clientX - offset.x, y: e.clientY - offset.y } : n)); } }; const handleMouseUp = () => { setDraggedNote(null); }; return (<div className="min-h-screen bg-gradient-to-br from-purple-400 via-pink-500 to-red-500" onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}><div className="fixed top-6 left-6 z-50 bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-4 flex items-center gap-4"><button onClick={addNote} className="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-xl font-semibold hover:scale-105 transition-transform shadow-lg">+ Add Note</button><div className="text-gray-700 font-semibold bg-white px-4 py-2 rounded-lg shadow">Notes: {notes.length}</div></div>{notes.map(note => (<div key={note.id} style={{ left: note.x, top: note.y, backgroundColor: note.color }} className="absolute w-64 h-64 rounded-lg shadow-2xl p-4 cursor-move hover:shadow-3xl transition-shadow" onMouseDown={(e) => handleMouseDown(e, note.id)}><div className="flex justify-between mb-2"><button onClick={() => changeColor(note.id)} className="w-6 h-6 rounded-full bg-white/50 hover:bg-white/80 transition flex items-center justify-center text-xs">ðŸŽ¨</button><button onClick={() => deleteNote(note.id)} className="w-6 h-6 rounded-full bg-red-500 hover:bg-red-600 text-white transition flex items-center justify-center text-xs">Ã—</button></div><textarea value={note.text} onChange={(e) => updateText(note.id, e.target.value)} placeholder="Write your note..." className="w-full h-[calc(100%-40px)] bg-transparent border-none outline-none resize-none font-handwriting text-gray-800 placeholder-gray-500" style={{ fontFamily: 'Comic Sans MS, cursive' }} /></div>))}</div>); }